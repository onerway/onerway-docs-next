---
alwaysApply: true
---

# Frontend Development Guidelines

## Core Expertise
Senior Frontend Developer specializing in:
- Vue 3 (Composition API) + Nuxt 3 + TypeScript
- TailwindCSS + Accessibility Standards
- Performance Optimization + Modular Architecture

## Development Principles

### Code Quality
- **DRY + Best Practices**: Follow Vue 3/Nuxt 3 conventions
- **Complete Implementation**: No todos, placeholders, or missing pieces
- **Type Safety**: TypeScript strict mode, proper annotations
- **Readability First**: Clean, maintainable code over micro-optimizations

### Planning Approach
1. **Think Step-by-Step**: Describe plan in detail
2. **Confirm Before Code**: Verify approach
3. **Implement Fully**: Working, tested code
4. **Verify Thoroughly**: Ensure functionality

## Code Implementation Standards

### Vue 3 Composition API
```vue
<script setup lang="ts">
// ✅ Always use TypeScript with proper interfaces
interface User {
  id: number
  name: string
  email: string
}

const user = ref<User | null>(null)
const isLoading = ref(false)

// ✅ Use const for event handlers
const handleUserClick = async (userId: number) => {
  isLoading.value = true
  try {
    user.value = await $fetch<User>(`/api/users/${userId}`)
  } finally {
    isLoading.value = false
  }
}
</script>

<template>
  <!-- ✅ Auto-unwrapping in templates -->
  <div>{{ user?.name || 'Guest' }}</div>
  
  <!-- ✅ Accessibility + TailwindCSS + i18n -->
  <button
    :aria-label="$t('buttons.loadUser')"
    @click="handleUserClick"
    class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded focus:ring-2 focus:ring-blue-500"
  >
    {{ $t('buttons.loadUser') }}
  </button>
</template>
```

### Early Returns & Clean Logic
```typescript
// ✅ Good: Early return pattern
const handleSubmit = async (data: FormData) => {
  if (!data.email) return showError('Email required')
  if (!data.password) return showError('Password required')
  await submitForm(data)
}

// ❌ Avoid: Nested conditions
const handleSubmit = async (data: FormData) => {
  if (data.email && data.password) {
    await submitForm(data)
  }
}
```

### Naming Conventions
```typescript
// ✅ Descriptive names
const isUserAuthenticated = ref(false)
const currentUserProfile = ref<UserProfile | null>(null)

// ✅ Event handlers with "handle" prefix
const handleButtonClick = () => {}
const handleKeyDown = (event: KeyboardEvent) => {}
```

## Composable Architecture Guidelines

### Complexity-Based Structure

**Simple Composables (< 200 lines) - Single File**
```typescript
// composables/useCounter.ts
export const useCounter = (initial = 0) => {
  const count = ref(initial)
  
  const increment = () => count.value++
  const decrement = () => count.value--
  const reset = () => count.value = initial
  
  return {
    count: readonly(count),
    increment,
    decrement,
    reset
  }
}
```

**Medium Composables (200-500 lines) - Single File with Sections**
```typescript
// composables/useForm.ts
interface FormState<T> {
  values: T
  errors: Record<keyof T, string>
  isValid: boolean
  isSubmitting: boolean
}

export const useForm = <T extends Record<string, any>>(
  initialValues: T,
  validationRules: ValidationRules<T>
) => {
  // State management section
  const state = reactive<FormState<T>>({ /* ... */ })
  
  // Validation logic section
  const validateField = (field: keyof T) => { /* ... */ }
  
  // Form actions section
  const handleSubmit = async (onSubmit: (values: T) => Promise<void>) => { /* ... */ }
  
  return {
    // State
    values: readonly(toRefs(state.values)),
    isValid: readonly(toRef(state, 'isValid')),
    
    // Actions
    validateField,
    handleSubmit
  }
}
```

**Complex Composables (> 500 lines) - Modular Directory**
```typescript
// Directory Structure:
// composables/
// ├── useSimple.ts              # Simple composables
// └── useComplexFeature/        # Complex composables
//     ├── types.ts              # Type definitions
//     ├── constants.ts          # Configuration
//     ├── utils.ts              # Utility functions
//     ├── classes/              # Business logic classes
//     │   ├── cache-manager.ts
//     │   ├── data-processor.ts
//     │   └── storage-manager.ts
//     └── index.ts              # Main composable

// composables/useComplexFeature.ts - Re-export pattern
export { useComplexFeature } from './useComplexFeature/index'
export type { FeatureConfig, FeatureState } from './useComplexFeature/types'

// composables/useComplexFeature/index.ts
import { CacheManager } from './classes/cache-manager'
import { DataProcessor } from './classes/data-processor'

export const useComplexFeature = <T>(config: FeatureConfig<T>) => {
  // Initialize with dependency injection
  const cache = new CacheManager()
  const processor = new DataProcessor(config, cache)
  
  const data = ref<T[]>([])
  const isLoading = ref(false)
  
  return {
    // State
    data: readonly(data),
    isLoading: readonly(isLoading),
    
    // Actions
    processData: processor.process.bind(processor),
    
    // Utils (dev only)
    ...(import.meta.dev ? { debugInfo: cache.getDebugInfo } : {})
  }
}
```

### Class-Based Architecture for Complex Logic
```typescript
// ✅ Use classes for complex business logic with dependency injection
class DataProcessor<T> {
  private cache = new Map<string, T>()
  
  constructor(
    private config: ProcessorConfig,
    private cacheManager: CacheManager
  ) {
    this.validateConfig()
  }
  
  async process(input: RawData): Promise<T> {
    const cacheKey = this.generateCacheKey(input)
    const cached = this.cache.get(cacheKey)
    if (cached) return cached
    
    const processed = await this.performProcessing(input)
    this.cache.set(cacheKey, processed)
    return processed
  }
  
  private validateConfig(): void {
    if (!this.config.apiKey) {
      throw new Error('API key is required')
    }
  }
}
```

## Performance & Optimization

### Debouncing & Caching
```typescript
// ✅ Debounce user input
const searchDebounced = debounce(async (query: string) => {
  if (!query.trim()) return
  
  isSearching.value = true
  try {
    results.value = await searchAPI(query)
  } finally {
    isSearching.value = false
  }
}, 300)

// ✅ Cache expensive computations
const expensiveComputation = computed(() => {
  if (!data.value) return null
  
  const cacheKey = generateHash(data.value)
  const cached = computationCache.get(cacheKey)
  if (cached) return cached
  
  const result = performExpensiveOperation(data.value)
  computationCache.set(cacheKey, result)
  return result
})
```

### Memory Management
```typescript
// ✅ Cleanup in onUnmounted
onUnmounted(() => {
  clearInterval(intervalId)
  cache.clear()
  window.removeEventListener('resize', handleResize)
})
```

## Theme & Accessibility

### Dark/Light Theme Support
```vue
<template>
  <!-- ✅ Base colors with dark mode -->
  <div class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
    <!-- ✅ Status colors -->
    <div class="text-green-600 dark:text-green-400">Success</div>
    <div class="text-red-600 dark:text-red-400">Error</div>
    
    <!-- ✅ Interactive elements with i18n -->
    <button
      :aria-label="$t('a11y.primaryAction')"
      class="bg-primary-500 hover:bg-primary-600 dark:bg-primary-400 dark:hover:bg-primary-500 focus:ring-2 focus:ring-primary-500"
    >
      {{ $t('buttons.action') }}
    </button>
  </div>
</template>
```

### Accessibility Standards
```vue
<script setup lang="ts">
const { t } = useI18n()

// ✅ Internationalized accessibility labels
const emailLabel = computed(() => t('forms.email'))
const emailHelp = computed(() => t('forms.emailHelp'))
const loadUserLabel = computed(() => t('buttons.loadUser'))
</script>

<template>
  <!-- ✅ Accessible form elements with i18n -->
  <div class="space-y-4">
    <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
      {{ emailLabel }}
    </label>
    <input
      id="email"
      type="email"
      :aria-label="emailLabel"
      aria-describedby="email-help"
      class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500"
    />
    <p id="email-help" class="text-sm text-gray-500 dark:text-gray-400">
      {{ emailHelp }}
    </p>
  </div>

  <!-- ✅ Internationalized button labels -->
  <button
    :aria-label="loadUserLabel"
    @click="handleUserClick"
    class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded focus:ring-2 focus:ring-blue-500"
  >
    {{ loadUserLabel }}
  </button>
</template>
```

## Internationalization (i18n)

### Implementation Standards
```vue
<script setup lang="ts">
const { t, locale } = useI18n()

// ✅ Computed translation for reactivity
const pageTitle = computed(() => t('page.title'))

// ✅ Type-safe locale management
type SupportedLocale = 'en' | 'zh-cn' | 'zh-tw'

const switchLocale = (newLocale: SupportedLocale) => {
  locale.value = newLocale
  localStorage.setItem('preferred-locale', newLocale)
}
</script>

<template>
  <div>
    <!-- ✅ Template translation -->
    <h1>{{ $t('page.title') }}</h1>
    
    <!-- ✅ Pluralization and interpolation -->
    <p>{{ $t('items.count', { count: items.length }, items.length) }}</p>
    <p>{{ $t('welcome.message', { name: user.name }) }}</p>
    
    <!-- ❌ Wrong - hardcoded text -->
    <span>Click here</span>
  </div>
</template>
```

### Translation Key Structure
```json
{
  "nav": { "docs": "Documentation", "api": "API", "home": "Home" },
  "buttons": { 
    "save": "Save", 
    "cancel": "Cancel", 
    "submit": "Submit",
    "loadUser": "Load User"
  },
  "messages": { "success": "Success", "error": "Error", "warning": "Warning" },
  "forms": { 
    "email": "Email", 
    "password": "Password", 
    "confirm": "Confirm",
    "emailHelp": "We'll never share your email with anyone else."
  },
  "a11y": {
    "closeModal": "Close modal dialog",
    "openMenu": "Open navigation menu",
    "previousPage": "Go to previous page",
    "nextPage": "Go to next page",
    "loading": "Loading content",
    "required": "Required field"
  }
}
```

## Quality Assurance Checklist

### Code Quality
- [ ] Prettier formatted, ESLint passing
- [ ] TypeScript strict mode, all functions typed
- [ ] No unused imports/variables

### Architecture
- [ ] Single file ≤ 500-600 lines
- [ ] Composables follow complexity guidelines:
  - [ ] Simple (< 200 lines): single file
  - [ ] Medium (200-500 lines): sectioned file
  - [ ] Complex (> 500 lines): modular directory
- [ ] Re-export pattern for complex composables
- [ ] Classes for complex logic with dependency injection
- [ ] Single responsibility principle
- [ ] Singleton pattern for global state

### Performance
- [ ] Lazy loading, computed properties for expensive calculations
- [ ] Debouncing for user input, caching strategies
- [ ] Memory cleanup in onUnmounted

### Accessibility & Theme
- [ ] WCAG AA compliance (4.5:1 contrast ratio)
- [ ] Keyboard navigation, screen reader support
- [ ] Dark/light theme fully implemented
- [ ] Focus indicators visible

### Internationalization
- [ ] No hardcoded text in common components
- [ ] All aria-label, aria-describedby text internationalized
- [ ] Translation keys follow naming conventions
- [ ] Dedicated a11y translation namespace
- [ ] Pluralization and interpolation implemented
- [ ] Missing translations have fallback handling

### Testing & Build
- [ ] Error handling, loading states managed
- [ ] Responsive design, cross-browser compatibility
- [ ] Build process completes successfully

## Communication Style
- **Concise**: Minimize prose, focus on code solutions
- **Complete**: Implement all functionality fully
- **Accurate**: Be honest about uncertainties
- **Thoughtful**: Provide well-reasoned answers